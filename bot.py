from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import gspread
import os
import json
from keep_alive import keep_alive
import asyncio
from aiohttp import web

keep_alive()

# ===== –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê GOOGLE CREDS =====
GOOGLE_CREDS = os.environ.get("GOOGLE_CREDS")
if not GOOGLE_CREDS:
    raise ValueError("GOOGLE_CREDS environment variable not found!")

try:
    creds_dict = json.loads(GOOGLE_CREDS)  # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    gc = gspread.service_account_from_dict(creds_dict)
    sh = gc.open('CG 1')
    worksheet = sh.sheet1
except Exception as e:
    raise RuntimeError(f"Google Sheets auth failed: {str(e)}")

# ===== –û–°–ù–û–í–ù–û–ô –ö–û–î –ë–û–¢–ê =====
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN environment variable not found!")

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–∫-–∫–æ–¥"],
            ["üì¶ –ê–¥—Ä–µ—Å –ò–≤—É –°–∞–º–æ–ª—ë—Ç", "üöõ –ê–¥—Ä–µ—Å –ì—É–∞–Ω—á–∂–æ—É –ö–∞–º–∞–∑"],
            ["üè¢ –ê–¥—Ä–µ—Å –î—É—à–∞–Ω–±–µ", "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"],
            ["üí¨ WhatsApp", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ],
        resize_keyboard=True
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_main_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–∫-–∫–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥:")
        context.user_data["wait_for_track"] = True
        return

    if context.user_data.get("wait_for_track"):
        context.user_data["wait_for_track"] = False
        user_code = text.strip()
        
        try:
            records = worksheet.get_all_records()
            found = any(
                str(record.get("TrackingCode", "")).strip() == user_code
                for record in records
            )
            
            if found:
                await update.message.reply_text("‚úÖ –¢—Ä–µ–∫-–∫–æ–¥ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_main_keyboard())
            else:
                await update.message.reply_text("‚ùå –¢—Ä–µ–∫-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_main_keyboard())
        except Exception as e:
            await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

async def webhook_handler(request):
    data = await request.json()
    update = Update.de_json(data, app.bot)
    await app.process_update(update)
    return web.Response(text="OK")

async def main():
    global app
    app = ApplicationBuilder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    PORT = int(os.environ.get("PORT", 10000))
    WEBHOOK_URL = f"https://{os.environ.get('RENDER_SERVICE_NAME')}.onrender.com/webhook"

    await app.initialize()
    await app.bot.set_webhook(WEBHOOK_URL)

    web_app = web.Application()
    web_app.router.add_post("/webhook", webhook_handler)
    web_app.router.add_get("/", lambda _: web.Response(text="Bot is alive!"))
    
    runner = web.AppRunner(web_app)
    await runner.setup()
    await web.TCPSite(runner, "0.0.0.0", PORT).start()
    await asyncio.Event().wait()

if _name_ == "_main_":
    asyncio.run(main())
